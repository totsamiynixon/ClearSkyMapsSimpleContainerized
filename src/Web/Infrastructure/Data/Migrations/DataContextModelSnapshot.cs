// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Web.Infrastructure.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Web.Domain.Entities.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApiKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Sensors");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Sensor");
                });

            modelBuilder.Entity("Web.Domain.Entities.StaticSensorReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("CH4")
                        .HasColumnType("real");

                    b.Property<float>("CO")
                        .HasColumnType("real");

                    b.Property<float>("CO2")
                        .HasColumnType("real");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<float>("Dust")
                        .HasColumnType("real");

                    b.Property<float>("Hum")
                        .HasColumnType("real");

                    b.Property<float>("LPG")
                        .HasColumnType("real");

                    b.Property<float>("Preassure")
                        .HasColumnType("real");

                    b.Property<int>("StaticSensorId")
                        .HasColumnType("int");

                    b.Property<float>("Temp")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("StaticSensorId");

                    b.ToTable("StaticSensorReadings");
                });

            modelBuilder.Entity("Web.Domain.Entities.PortableSensor", b =>
                {
                    b.HasBaseType("Web.Domain.Entities.Sensor");

                    b.HasDiscriminator().HasValue("PortableSensor");
                });

            modelBuilder.Entity("Web.Domain.Entities.StaticSensor", b =>
                {
                    b.HasBaseType("Web.Domain.Entities.Sensor");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("StaticSensor");
                });

            modelBuilder.Entity("Web.Domain.Entities.StaticSensorReading", b =>
                {
                    b.HasOne("Web.Domain.Entities.StaticSensor", "StaticSensor")
                        .WithMany("Readings")
                        .HasForeignKey("StaticSensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
